=========
List of symbols:
BMW.DE
LHA.DE
APC.DE => Apple
=========
// Static list of stocks
    this.stocks = [
      {
        name: 'BMW',
        price: 67.23,
        symbol: 'BMW.DE'
      },
      {
        name: 'Lufthansa',
        price: 20.43,
        symbol: 'LHA.DE'
      },
      {
        name: 'Apple Inc.',
        price: 180.34,
        symbol: 'LHA.DE'
      },
    ];
  }
====
RXJS for SearchPage

import { StocksService } from '../shared/stocks.service';
import { Component, OnInit } from '@angular/core';
import { Stock } from '../shared/models/stock';
import { mergeMap, map, startWith, withLatestFrom } from 'rxjs/operators';
import { Observable, concat, Subject, combineLatest } from 'rxjs';

@Component({
  selector: 'search-page',
  templateUrl: './search-page.component.html',
  styleUrls: ['./search-page.component.scss']
})
export class SearchPageComponent implements OnInit {

  public stocks: Observable<Stock[]>;
  public termChanged$: Subject<string> = new Subject<string>();
  constructor(private readonly stocksService: StocksService) { }

  ngOnInit() {

    const mostTraed$ = this.stocksService.getMostTraded();
    const addStock$ = this.termChanged$.pipe(
      mergeMap(symbol => this.stocksService.getStock(symbol)),
      withLatestFrom(mostTraed$, (stock, mostTradedStocks) => [...mostTradedStocks, stock]),
    );

    this.stocks = concat(this.stocksService.getMostTraded(), addStock$);
  }

  public addStock(symbol: string) {
    console.log('Evenet recieved' + symbol);
    // this.stocksService.getStock(symbol)
    //                   .pipe(first())
    //                   .subscribe((data) => this.stocks = [...this.stocks, data]);
  }

}
